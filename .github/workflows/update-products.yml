name: Update Product Data

on:
  repository_dispatch:
    types: [website_changed]
  workflow_dispatch:
  push:
    paths:
      - 'out/**/llms-*-manifest.json'
      - 'out/**/llms-*-index.json'

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Validate webhook payload
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "Validating rivvy-observer webhook payload..."
          echo "Event type: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Client payload: ${{ toJson(github.event.client_payload) }}"
          
          # Validate rivvy-observer format - simplified validation
          echo "Validating required fields..."
          
          # Check essential fields only
          if [ "${{ github.event.client_payload.website.url }}" = "" ]; then
            echo "Error: Missing 'website.url' field in rivvy-observer payload"
            exit 1
          fi
          
          if [ "${{ github.event.client_payload.change.changeType }}" = "" ]; then
            echo "Error: Missing 'change.changeType' field in rivvy-observer payload"  
            exit 1
          fi
          
          echo "Website URL: ${{ github.event.client_payload.website.url }}"
          echo "Change Type: ${{ github.event.client_payload.change.changeType }}"
          echo "Scrape Result Title: ${{ github.event.client_payload.scrapeResult.title }}"
          
          echo "rivvy-observer payload validation passed"

      - name: Update products
        env:
          FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
        run: |
          echo "Action: ${{ github.event.action }}"
          
          # Check if this is a repository_dispatch event
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Processing rivvy-observer webhook..."
            
            # Extract site info from rivvy-observer payload
            site_url="${{ github.event.client_payload.website.url }}"
            change_type="${{ github.event.client_payload.change.changeType }}"
            scraped_content="${{ github.event.client_payload.scrapeResult.markdown }}"
            
            echo "Site URL: $site_url"
            echo "Change type: $change_type"
            echo "Has scraped content: $([ -n "$scraped_content" ] && echo "Yes" || echo "No")"
            
            # Extract domain
            domain=$(echo "$site_url" | sed -E 's|^https?://||' | sed -E 's|^www\.||' | sed -E 's|/.*$||' | sed -E 's|:.*$||')
            
            if [ -z "$domain" ]; then
              echo "Error: Could not extract domain from: $site_url"
              exit 1
            fi
            
            output_dir="out/$domain"
            echo "Domain: $domain"
            echo "Output directory: $output_dir"
            
            # Ensure output directory exists
            mkdir -p "$output_dir"
            
            # Create a temporary file with the scraped content
            temp_file="/tmp/scraped_content_$domain.md"
            echo "$scraped_content" > "$temp_file"
            
            # Process based on change type
            case "$change_type" in
              "content_modified"|"page_added"|"content_changed")
                echo "Processing content modification for $domain"
                # Use the pre-scraped content instead of re-scraping
                python3 scripts/update_llms_sharded.py "$site_url" \
                  --added "[\"$site_url\"]" \
                  --output-dir "$output_dir" \
                  --pre-scraped-content "$temp_file"
                ;;
              "page_removed")
                echo "Processing page removal for $domain"
                python3 scripts/update_llms_sharded.py "$site_url" \
                  --removed "[\"$site_url\"]" \
                  --output-dir "$output_dir"
                ;;
              *)
                echo "Unknown change type: $change_type, treating as content modification"
                python3 scripts/update_llms_sharded.py "$site_url" \
                  --added "[\"$site_url\"]" \
                  --output-dir "$output_dir" \
                  --pre-scraped-content "$temp_file"
                ;;
            esac
            
            # Clean up temp file
            rm -f "$temp_file"
            
            echo "Successfully processed webhook for $domain"
            echo "Output directory: $output_dir"
            echo "Files in output directory:"
            ls -la "$output_dir" || echo "No files found in output directory"
          else
            # For push events, dynamically discover and process all existing sites
            echo "Processing URLs from manifest files..."
            
            # Find all directories in out/ that contain manifest.json files
            for site_dir in out/*/; do
              if [ -d "$site_dir" ] && [ -f "${site_dir}manifest.json" ]; then
                # Extract domain from directory name
                domain=$(basename "$site_dir")
                manifest_file="${site_dir}manifest.json"
                
                echo "Processing $domain URLs from manifest..."
                
                # Extract URLs from manifest and process them
                if python3 -c "import json; data=json.load(open('$manifest_file')); print(json.dumps(data.get('collections', [])))" > /tmp/urls_$domain.json 2>/dev/null; then
                  urls=$(cat /tmp/urls_$domain.json)
                  
                  if [ "$urls" != "[]" ] && [ "$urls" != "null" ]; then
                    # Determine the base URL for the site
                    base_url="https://www.$domain"
                    
                    # Try to get the actual site URL from manifest if available
                    if python3 -c "import json; data=json.load(open('$manifest_file')); print(data.get('base_url', ''))" > /tmp/base_url_$domain.txt 2>/dev/null; then
                      manifest_base_url=$(cat /tmp/base_url_$domain.txt | tr -d '"')
                      if [ -n "$manifest_base_url" ] && [ "$manifest_base_url" != "null" ]; then
                        base_url="$manifest_base_url"
                      fi
                    fi
                    
                    echo "Using base URL: $base_url for domain: $domain"
                    python3 scripts/update_llms_sharded.py "$base_url" --added "$urls" --output-dir "$site_dir"
                    
                    # Clean up temp files
                    rm -f /tmp/urls_$domain.json /tmp/base_url_$domain.txt
                  else
                    echo "No URLs found in manifest for $domain"
                  fi
                else
                  echo "Error: Failed to read manifest file for $domain"
                fi
              fi
            done
          fi
          
      - name: Check for changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-update: ${{ github.event_name }} - ${{ github.event.action || 'push' }}"
          git push
          
      - name: Deploy to ElevenLabs
        if: steps.changes.outputs.changes == 'true'
        run: |
          echo "Files updated, would deploy to ElevenLabs here"
          # rsync -av --update out/llms-*.txt ${{ secrets.ELEVENLABS_SERVER }}:/data/